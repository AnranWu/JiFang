
const int Ni = 1000005;    //总点个数，要改哦！
const int MAX = 1<<26;
struct Edge{
    int u,v,c;
    int next;
};
struct Dinic{
    int n,m;
    int edn;//边数
    int p[Ni];//父亲
    int d[Ni];
    int sp,tp;//原点，汇点
    Edge edge[6*Ni];

    void init(int sp,int tp){
        this->sp=sp;
        this->tp=tp;
        edn=0;
        memset(p,-1,sizeof(int)*(n+2));
    }
    void addedge(int u,int v,int c)
    {
        edge[edn].u=u; edge[edn].v=v; edge[edn].c=c;
        edge[edn].next=p[u]; p[u]=edn++;
        edge[edn].u=v; edge[edn].v=u; edge[edn].c=0;//改成0就是原图单向边，改成c就是双向边
        edge[edn].next=p[v]; p[v]=edn++;

    }

  int bfs()
    {
        queue <int> q;
        while(!q.empty()) q.pop();
        memset(d,-1,sizeof(d));
        d[sp]=0;
        q.push(sp);

        while(!q.empty())
        {
            int cur=q.front();
            q.pop();

            for(int i=p[cur];i!=-1;i=edge[i].next)
            {
                int u=edge[i].v;
                if(d[u]==-1 && edge[i].c>0)
                {
                    d[u]=d[cur]+1;
                    q.push(u);
                }
            }
        }
        return d[tp] != -1;
    }
  int dfs(int a,int b)
    {
        int r=0;
        if(a==tp)return b;
        for(int i=p[a];i!=-1 && r<b;i=edge[i].next)
        {
            int u=edge[i].v;
            if(edge[i].c>0 && d[u]==d[a]+1)
            {
                int x=min(edge[i].c,b-r);
                x=dfs(u,x);
                r+=x;
                edge[i].c-=x;
                edge[i^1].c+=x;
            }
        }
        if(!r)d[a]=-2;
        return r;
    }

    int Maxflow()
    {
        int total=0,t;
        while(bfs())
        {
            while(t=dfs(sp,MAX))
            total+=t;
        }
        return total;
    }
}dinic;

 int main(){
     int n,m;
    while(~scanf("%d%d",&n,&m))
    {
        dinic.init(1,n*m);
        int x,i,j;
        for(i=1;i<=n;i++){
            for(j=1;j<m;j++){
                scanf("%d",&x);
                dinic.addedge((i-1)*m+j,(i-1)*m+j+1,x);
            }
        }
        for(i=1;i<n;i++){
            for(j=1;j<=m;j++){
                scanf("%d",&x);
                dinic.addedge((i-1)*m+j,i*m+j,x);
            }
        }
        for(i=1;i<n;i++){
            for(j=1;j<m;j++){
                scanf("%d",&x);
                dinic.addedge((i-1)*m+j,i*m+j+1,x);
            }
        }

        printf("%d\n",dinic.Maxflow());
    }
    return 0;
}
